from django.contrib.auth import get_user_model
from django.db import models
from django.db.models.aggregates import Sum


class PersonManager(models.Manager):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ Person.
    """
    def all_with_prefetch_movies(self):
        qs = self.get_queryset()
        return qs.prefetch_related(
            'directed',  # –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–ª—å–º–∞ –∏–∑ Movie
            'scriptwriter',  # –∞–≤—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å–º–∞ –∏–∑ Movie
            'role_set__movie',  # —Ä–æ–ª—å –∏–∑ Role –≤ —Ñ–∏–ª—å–º–µ –∏–∑ Movie
        )


class Person(models.Model):
    first_name = models.CharField(max_length=140)
    last_name = models.CharField(max_length=140)
    born = models.DateField()
    died = models.DateField(null=True, blank=True)

    objects = PersonManager()

    class Meta:
        ordering = ('last_name', 'first_name')

    def __str__(self):
        if self.died:
            return (
                f'{self.last_name}, {self.first_name} ({self.born}-{self.died})'
            )
        return f'{self.last_name}, {self.first_name} ({self.born})'


class MovieManager(models.Manager):
    def all_with_related_persons_and_movies(self):
        qs = self.get_queryset()
        qs = qs.select_related('director')  # —Å–≤—è–∑—å –æ–¥–∏–Ω-–∫–æ-–º–Ω–æ–≥–∏–º
        qs = qs.prefetch_related('writers', 'actors')  # —Å–≤—è–∑—å –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º
        return qs

    def all_with_related_persons_and_score(self):
        qs = self.all_with_related_persons_and_movies()
        qs = qs.annotate(score=Sum('vote__value'))
        return qs


class Movie(models.Model):
    title = models.CharField(max_length=140,)
    plot = models.TextField()
    year = models.PositiveSmallIntegerField()
    runtime = models.PositiveSmallIntegerField()
    website = models.URLField(blank=True)
    director = models.ForeignKey(
        to='Person',  # —É –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä
        null=True,
        on_delete=models.SET_NULL,
        related_name='directed',  # –∞–ª–∏–∞—Å, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
        # –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ Person
        blank=True,
    )
    writers = models.ManyToManyField(
        to='Person',
        related_name='scriptwriters',
        blank=True,)
    actors = models.ManyToManyField(
        to='Person',
        through='Role',
        related_name='acting_credits',
        blank=True,
    )

    objects = MovieManager()

    class Meta:
        ordering = ('-year', 'title')

    def __str__(self):
        return f'{self.title} ({self.year})'


class Role(models.Model):
    movie = models.ForeignKey(Movie, on_delete=models.DO_NOTHING)
    person = models.ForeignKey(Person, on_delete=models.DO_NOTHING)
    name = models.CharField(max_length=140)

    def __str__(self):
        return "{} {} {}".format(self.movie_id, self.person_id, self.name)

    class Meta:
        unique_together = ('movie', 'person', 'name')


class VoteManager(models.Manager):
    def get_vote_or_unsaved_blank_vote(self, movie, user):
        try:
            return Vote.objects.get(movie=movie, user=user, )
        except Vote.DoesNotExist:
            return Vote()


class Vote(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    UP = 1
    DOWN = -1
    VALUE_CHOICES = ((UP, "üëç",), (DOWN, "üëé",),)

    #  –æ—Ü–µ–Ω–∫–∞
    value = models.SmallIntegerField(choices=VALUE_CHOICES,)
    #  –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–π —é–∑–µ—Ä
    user = models.ForeignKey(to=get_user_model(), on_delete=models.CASCADE,)
    #  —Ñ–∏–ª—å–º, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞–Ω –≥–æ–ª–æ—Å
    movie = models.ForeignKey(to=Movie, on_delete=models.CASCADE, )
    #  –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    voted_on = models.DateTimeField(auto_now=True,)

    objects = VoteManager()

    class Meta:
        unique_together = ('user', 'movie')
